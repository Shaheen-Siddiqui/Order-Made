(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
  typeof define === 'function' && define.amd ? define(['react'], factory) :
  (global = global || self, global.useMediaQuery = factory(global.React));
}(this, function (react) { 'use strict';

  /**
   * React hook to check when a valid media-query-string changes
   * (i.e. when the media query test starts or stops evaluating to true)
   *
   * @param {string} mediaQueryString valid media query string. E.g.: `(min-width: 425px)`
   * @returns {boolean} media-query matches value
   */
  function useMediaQuery(mediaQueryString) {
    const [queryMatch, setQueryMatch] = react.useState(null);

    react.useEffect(() => {
      const setMediaMatchHandler = e => setQueryMatch(e.matches);

      const mediaQueryList = window.matchMedia(mediaQueryString);

      setMediaMatchHandler(mediaQueryList);

      mediaQueryList.addListener(setMediaMatchHandler);

      return () => mediaQueryList.removeListener(setMediaMatchHandler);
    }, [mediaQueryString]);

    return queryMatch;
  }

  return useMediaQuery;

}));
